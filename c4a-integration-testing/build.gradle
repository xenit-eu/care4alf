import com.github.dynamicextensionsalfresco.gradle.configuration.BaseConfig
import com.github.dynamicextensionsalfresco.gradle.tasks.InstallBundle


subprojects {
    apply plugin: 'alfresco-dynamic-extension' // Applies aQute bnd plugin for us
    apply plugin: 'eu.xenit.docker-alfresco'
    apply from: "${project.projectDir}/overrides.gradle"

    sourceSets {
        main {
            java {
                // potentially unnecessary, we don't have java-shared... (for that matter, neither does apix)
                srcDirs = ['src/integration-test/java-shared', 'src/main/java']
                // This is needed because client side, these dependencies are not really provided
                runtimeClasspath += configurations.compileOnly
            }
            resources {
                // potentially unnecessary, we don't have this
                srcDir "${project.parent.projectDir}/src/integration-test/resources"
            }
        }
    }

    configurations {
        integrationJar
        install.extendsFrom(integrationJar)
        compileOnly.extendsFrom(integrationJar)
    }

    dependencies {
        compileOnly project(":care4alf")

        compileOnly(group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_version) {
            exclude group: 'maven-plugins'
        }
        compileOnly(group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_version) {
            transitive = false
        }
        compileOnly group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        compileOnly group: 'eu.xenit.de', name: 'annotations', version: de_version
        compileOnly group: 'org.osgi', name: 'org.osgi.core', version: '4.3.1'

        integrationJar group: 'eu.xenit.testing', name: 'integration-testing', version: '1.1.0'

        compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: http_version
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: http_version
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: http_core_version
        compile group: 'org.apache.httpcomponents', name: 'httpmime', version: http_version
//        compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
//        compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
//        compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
//        compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
//        compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jackson_version
//        compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: jackson_version

        compile(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.3.2')
        compile(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.3.2')
        compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
        compile group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
        compile group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'
        compile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
        compile group: 'com.google.guava', name: 'guava', version: '19.0'
    }
    jar {
        bnd(
                'Export-Package': 'eu.xenit.care4alfintegration.*',
                'Include-Resource': includeResource(configurations.compile),
                'Bundle-ClassPath': bundleClassPath(configurations.compile),
                'Alfresco-Dynamic-Extension': 'true',
                'Import-Package': ('eu.xenit.care4alf.*,'
                        // We need to specify this very wide version range because otherwise the bnd tool will choose
                        // a very specific version (I don't know why) that prevents deployment
                        + 'org.json;resolution:=optional;version="[0,99999999)",'
                        + '!COM.newmonics.PercClassLoader,'
                        + '!android.os,'
                        + '!com.github.scribejava.*,'
                        + '!com.google.appengine.api,'
                        + '!com.google.apphosting.api,'
                        + '!com.google.gson,'
                        // These are the fault of groovy
                        + '!org.apache.commons.cli,'
                        + '!org.apache.ivy.*,'
                        + '!org.fusesource.jansi,'
                        // This is the fault of commons-logging
                        + '!org.apache.log,'
                        // This is the fault of mockito
                        + '!org.apache.tools.ant.*,'
                        + '!org.junit.runners.*,'
                        + '!org.junit.runner.notification.*,'
                        + '!org.junit.internal.runners.*,'
                        + '!org.junit.rules.*,'
                        + '!org.mockito.asm.signature,'
                        + '!com.google.errorprone.annotations.concurrent,'
                        + '!org.joda.convert,'
                        + '!org.apache.log,'
                        + '!groovy.runtime.metaclass,'
                        + '!jrockit.vm,'
                        + '*')
        )
    }

    // Docker dependencies
    dependencies {
        baseAlfrescoWar 'org.alfresco:alfresco-enterprise:5.1.4.1@war'
        alfrescoAmp "eu.xenit:alfresco-dynamic-extensions-repo:${deVersion}@amp"
        alfrescoAmp project(path: ':care4alf', configuration: 'amp')
    }

    dockerAlfresco {
        baseImage = 'hub.xenit.eu/alfresco-enterprise:5.1.4'
        leanImage = true
        dockerBuild {
            repository = 'hub.xenit.eu/care4alf-alfresco-51'
        }
    }

//    def projectDocker = project(":apix-docker:docker-${subproject_alfresco_version}")
    def composeUpTask = project.tasks.getByName("composeUp")
    def composeDownTask = project.tasks.getByName("composeDown")


    task configureDE {
        dependsOn composeUpTask
        doLast {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            def port = serviceInfo.ports[8080]
            def host = serviceInfo.getHost()
            alfrescoDynamicExtensions.repository.endpoint.port = port
            alfrescoDynamicExtensions.repository.endpoint.host = host
        }
    }

    task configureDELocal {
        doLast {
            alfrescoDynamicExtensions.repository.endpoint.protocol = project.hasProperty('protocol') ? project.protocol : 'http'
            alfrescoDynamicExtensions.repository.endpoint.port = project.hasProperty('port') ? project.port : '8080'
            alfrescoDynamicExtensions.repository.endpoint.host = project.hasProperty('host') ? project.host : 'localhost'
        }
    }

    task installIntegrationJar(type: InstallBundle) {
        dependsOn configureDE
        files = configurations.install { transitive = false }
    }

    task installIntegrationJarLocal(type: InstallBundle) {
        dependsOn configureDELocal
        files = configurations.install { transitive = false }
    }

    task installTestsOnDocker(type: InstallBundle) {
        dependsOn installIntegrationJar
        dependsOn jar
        files = jar.outputs
    }

    task installTestsLocal(type: InstallBundle) {
        dependsOn configureDELocal
        dependsOn jar
        files = jar.outputs
    }

    task integrationTest(type: Test) {
        group 'verification'
        dependsOn installTestsOnDocker
        testClassesDirs = sourceSets.main.output.classesDirs
        classpath = sourceSets.main.runtimeClasspath

        doFirst {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            def port = serviceInfo.ports[8080]
            def host = serviceInfo.getHost()
            systemProperty("alfresco.url", "http://admin:admin@" + host + ":" + port + "/alfresco")
        }
        outputs.upToDateWhen { false }

        // After the tests, the docker setup should be stopped
        finalizedBy(composeDownTask)
    }

    task integrationTestLocal(type: Test) {
        group 'verification'
        dependsOn installTestsLocal
        testClassesDirs = sourceSets.main.output.classesDirs
        classpath = sourceSets.main.runtimeClasspath
        def host = project.hasProperty('host') ? project.host : 'localhost'
        def port = project.hasProperty('port') ? project.port : '8080'
        def protocol = project.hasProperty('protocol') ? project.protocol : 'http'
        systemProperty("alfresco.url", "$protocol://admin:admin@" + host + ":" + port + "/alfresco")

        outputs.upToDateWhen { false }
    }
}
