plugins {
    id 'eu.xenit.alfresco' apply false
    id 'eu.xenit.amp' apply false
    id 'com.github.johnrengelman.shadow' version '5.1.0' apply false
}

import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
Beginning of the IntelliJ-helping section.
These variables are overridden in 5x/overrides.gradle and 6x/overrides.gradle.
During normal use of the collected build scripts, you never actually build any
artifact that uses the values below and always those from an overrides.gradle.
The reason these are here at all is to provide information to IntelliJ so that
it can do good syntax highlighting, because Intellij won't apply the overrides
when it does highlighting for any Java files in the ./src/main/java directory.
 */
ext {
    subproject_alfresco_version = '51'
    alfresco_repo_version = '5.1.g'
    alfresco_remote_api_version = '5.1.g'
    alfresco_img_version = '5.1'
    alfresco_dm_version = '6.16'
    de_version = '2.0.1'
    http_version = '4.3.3'
    http_core_version = '4.3.3'
}
// Give IntelliJ a default source of non-shared classes
sourceSets.main.java.srcDirs += "5x/src/main/java"
/* End of the IntelliJ-helping section. */

subprojects {
    apply from: "${project.projectDir}/overrides.gradle"
    apply from: "${rootProject.projectDir}/publish.gradle"
}

allprojects {
    apply plugin: 'eu.xenit.alfresco'
    apply plugin: 'eu.xenit.amp'
    apply plugin: 'alfresco-dynamic-extension'
    apply plugin: 'kotlin'
    apply plugin: 'com.moowork.node'
    apply plugin: 'de.richsource.gradle.plugins.typescript'
    apply plugin: 'lesscss'
    apply plugin: 'maven-publish'

    description = "Care4Alf â€” The Alfresco Swiss Army Knife"

    task sourceJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    def alfrescoAmp = file("${buildDir}/distributions/${project.name}-${project.version}.amp")
    task setupArtifacts {
        artifacts {
            archives alfrescoAmp, sourceJar, javadocJar
        }
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://artifacts.alfresco.com/nexus/content/repositories/public'
        }
    }

    configurations {
        // shadowDeps are our dependencies that get included in the bundle, but get shadowed (i.e. the package name gets
        // rewritten) so as not to pollute the classpath. The flipside is that these can't be part of the public api.
        // You can't expose a method that has e.g. a HttpClient parameter, because for care4alf (after compilation) that
        // will be eu.xenit.care4alf.impldeps.org.apache.HttpClient. Any external code that wants to call this public
        // method will not be able to reach this class and likely try with the regular org.apache.HttpClient. This won't
        // work, because they're distinct classes from the perspective of Java (despite being identical).
        // embedDeps is the exception to the above, these are embedded directly in the jar, without rewriting package
        // names and *can* be used for the public API, at the cost of polluting the classpath.
        shadowDeps
        embedDeps
        compile.extendsFrom shadowDeps
        compileOnly.extendsFrom embedDeps
    }

    dependencies {
        alfrescoProvided(group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_repo_version) {
            exclude group: 'maven-plugins'
            exclude group: 'org.springframework.social'
        }

        alfrescoProvided group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        alfrescoProvided('com.fasterxml.jackson.core:jackson-databind:2.3.2')

        alfrescoProvided("eu.xenit.de:annotations:${deVersion}") { transitive = false }
        alfrescoProvided("eu.xenit.de:annotations-runtime:${deVersion}") { transitive = false }
        alfrescoProvided("eu.xenit.de:webscripts:${deVersion}") { transitive = false }

        alfrescoProvided("org.osgi:org.osgi.core:4.3.1")

        shadowDeps('joda-time:joda-time:2.10.3')
        shadowDeps('org.joda:joda-convert:2.2.1')
        shadowDeps('javax.transaction:transaction-api:1.1') { transitive = false }
        shadowDeps('com.googlecode.json-simple:json-simple:1.1')
        shadowDeps('javax.servlet:servlet-api:2.5')
        shadowDeps('org.apache.commons:commons-csv:20110211')

        shadowDeps('org.apache.commons:commons-lang3:3.7')
        shadowDeps("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
        shadowDeps('commons-codec:commons-codec:1.10')
        
        if (project.name.contains("7x"))
            shadowDeps('org.apache.commons:commons-text:1.9')
        
        testImplementation "org.mockito:mockito-core:3.2.4"
    }

    lesscss {
        source = fileTree('../src/main/less') {
            include '**/*.less'
        }
        dest = file("${buildDir}/resources/main/")
        compress = false
    }

    task relocateDependencies(type: ShadowJar) {
        archiveClassifier = "shadow"
        from(sourceSets.main.output)
        configurations = [project.configurations.shadowDeps]
    }

    task configureRelocateDependencies(type: ConfigureShadowRelocation) {
        target = relocateDependencies
        prefix = "eu.xenit.care4alf.impldep"
    }


    relocateDependencies.dependsOn(configureRelocateDependencies)

    jar {
        from zipTree(relocateDependencies.outputs.files.singleFile)
        version = project.version.replace("SNAPSHOT", buildNumber)
        from(compileTypeScript.outputs)

        bnd(
                'Alfresco-Dynamic-Extension': 'true',
                'Bundle-Description': 'Care4Alf: The Alfresco Swiss Army Knife',
                'Bundle-Name': 'care4alf',
                'Bundle-SymbolicName': 'eu.xenit.care4alf',
                'Alfresco-Spring-Configuration': 'eu.xenit.care4alf',
                'DynamicImport-Package': '*',
                'Include-Resource': includeUnrolledResource(configurations.embedDeps),
                'Import-Package': 'org.json;version="[0,99999999)",'
                        + "!${configureRelocateDependencies.prefix}.*,"
                        + 'com.google.appengine.api;resolution:=optional,'
                        + 'com.google.apphosting.api;resolution:=optional,'
                        + 'com.google.common.reflect;resolution:=optional,'
                        + 'com.google.common.cache;version="[1,99999999)",'
                        + 'com.google.common.collect;version="[1,99999999)",'
                        + 'org.apache.commons.logging;version="[1.0.0,2.0.0)",'
                        + "*",
                'Export-Package': "!${configureRelocateDependencies.prefix}.*"
                        + ", !eu.xenit.care4alf.web.js.*"
                        + ", eu.xenit.care4alf.*;-noimport:=true"
        )
        dependsOn(relocateDependencies)
    }

    def moduleAliases = "care4alf"
    if(project.name.contains("6x"))
        moduleAliases += ", eu.xenit.care4alf.care4alf-5x"
    else if (project.name.contains("7x"))
        moduleAliases += ", eu.xenit.care4alf.care4alf-6x, eu.xenit.care4alf.care4alf-5x"
    sourceSets {
        main {
            java.srcDirs += '../src/main/java'
            kotlin.srcDirs += '../src/main/kotlin'
            resources.srcDirs += '../src/main/resources'
            amp {
                module([
                    "module.id": project.group + "." + project.name,
                    "module.version": project.version,
                    "module.title": project.name,
                    "module.description": project.description,
                    "module.aliases": moduleAliases,
                ])
                dynamicExtension()
            }
        }
    }

    amp {
        deBundles = jar.outputs.files
    }

    jar.dependsOn(['cleanCompileTypeScript', 'compileTypeScript', 'lesscss'])

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact tasks.amp
                artifact tasks.sourceJar
                artifact tasks.javadocJar
            }
        }
    }


// make typescript use the node plugin (cfr https://github.com/sothmann/typescript-gradle-plugin)
// instead of 'tsc' command line which is not present on Jenkins server !j
    def nodeExecutable = {
        NodeExtension nodeExt = NodeExtension.get(project)
        return new VariantBuilder(nodeExt).build().nodeExec
    }
    node {
        download = true
        nodeModulesDir = file(project(":c4a-impl").projectDir)
    }

    test {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }

        if (project.hasProperty('username')) {
            systemProperty 'username', project.getProperty('username')
        }

        if (project.hasProperty('password')) {
            systemProperty 'password', project.getProperty('password')
        }

        if (project.hasProperty('alfresco.url')) {
            systemProperty 'alfresco.url', project.getProperty('alfresco.url')
        }

        if (project.hasProperty('protocol')) {
            systemProperty 'protocol', project.getProperty('protocol')
        }

        if (project.hasProperty('host')) {
            systemProperty 'host', project.getProperty('host')
        }

        if (project.hasProperty('port')) {
            systemProperty 'port', project.getProperty('port')
        }
    }


    compileTypeScript {
        sourcemap = false
        source = '../src/main/ts/eu/xenit/care4alf/web/js/care4alf.ts'
        outFile = file("${buildDir}/ts/eu/xenit/care4alf/web/js/care4alf.js")

        compilerExecutable "${nodeExecutable()} ${project(":c4a-impl").projectDir}/node_modules/typescript/lib/tsc.js"
        dependsOn "npmInstall"
    }

    task configureDELocal {
        doLast {
            alfrescoDynamicExtensions.repository.endpoint.protocol = project.hasProperty('protocol') ? project.protocol : 'http'
            alfrescoDynamicExtensions.repository.endpoint.port = project.hasProperty('port') ? project.port : '8080'
            alfrescoDynamicExtensions.repository.endpoint.host = project.hasProperty('host') ? project.host : 'localhost'
        }
    }

    installBundle.dependsOn(configureDELocal)
}


