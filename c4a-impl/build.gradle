plugins {
    id 'eu.xenit.alfresco' apply false
    id 'eu.xenit.amp' apply false
    id 'com.github.johnrengelman.shadow' version '5.1.0' apply false
}

import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

subprojects {
    apply from: "${project.projectDir}/overrides.gradle"

    apply plugin: 'eu.xenit.alfresco'
    apply plugin: 'eu.xenit.amp'
    apply plugin: 'alfresco-dynamic-extension'
    apply plugin: 'kotlin'
    apply plugin: 'com.moowork.node'
    apply plugin: 'de.richsource.gradle.plugins.typescript'
    apply plugin: 'lesscss'
    apply plugin: 'maven-publish'

    description = "Care4Alf â€” The Alfresco Swiss Army Knife"

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from "${buildDir}/docs/javadoc"
    }

    def alfrescoAmp = file("${buildDir}/distributions/${project.name}-${project.version}.amp")
    task setupArtifacts {
        artifacts {
            archives alfrescoAmp, sourceJar, javadocJar
        }
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://artifactory.xenit.eu/artifactory/libs-release'
            credentials {
                username property('eu.xenit.artifactory.username')
                password property('eu.xenit.artifactory.password')
            }
        }
    }

    dependencies {
        alfrescoProvided(group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_repo_version) {
            exclude group: 'maven-plugins'
        }

        alfrescoProvided group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version

        alfrescoProvided("eu.xenit.de:annotations:${deVersion}") { transitive = false }
        alfrescoProvided("eu.xenit.de:annotations-runtime:${deVersion}") { transitive = false }
        alfrescoProvided("eu.xenit.de:webscripts:${deVersion}") { transitive = false }

        alfrescoProvided("org.osgi:org.osgi.core:4.3.1")

        compile('joda-time:joda-time:2.10.3')
        compile('org.joda:joda-convert:2.2.1')
        compile('javax.transaction:transaction-api:1.1') { transitive = false }
        compile('com.googlecode.json-simple:json-simple:1.1')
        compile('javax.servlet:servlet-api:2.5')
        compile('com.google.collections:google-collections:1.0')
        compile('org.apache.commons:commons-csv:20110211')

        compile('com.fasterxml.jackson.core:jackson-databind:2.3.2')
        compile('org.apache.commons:commons-lang3:3.7')
        compile('com.google.guava:guava:19.0') // I believe Alfresco comes bundled with v11. Conflicts?

        compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")

        compile('commons-codec:commons-codec:1.10')
    }

    lesscss {
        source = fileTree('src/main/less') {
            include '**/*.less'
        }
        dest = file("${buildDir}/resources/main/")
        compress = false
    }

    task relocateDependencies(type: ShadowJar) {
        archiveClassifier = "shadow"
        from(sourceSets.main.output)
        configurations = [project.configurations.runtimeClasspath]
    }

    task configureRelocateDependencies(type: ConfigureShadowRelocation) {
        target = relocateDependencies
        prefix = "eu.xenit.care4alf.impldep"
    }


    relocateDependencies.dependsOn(configureRelocateDependencies)

    jar {
        from zipTree(relocateDependencies.outputs.files.singleFile)
        version = project.version.replace("SNAPSHOT", buildNumber)
        from(compileTypeScript.outputs)

        bnd(
                'Alfresco-Dynamic-Extension': 'true',
                'Bundle-Description': 'Care4Alf: The Alfresco Swiss Army Knife',
                'Bundle-Name': 'care4alf',
                'Bundle-SymbolicName': 'eu.xenit.care4alf',
                'Alfresco-Spring-Configuration': 'eu.xenit.care4alf',
                'DynamicImport-Package': '*',
                'Import-Package': 'org.json;version="[0,99999999)",'
                        + "!${configureRelocateDependencies.prefix}.*,"
                        + 'com.hazelcast.monitor;resolution:=optional,'
                        + 'org.apache.commons.logging;version="[1.0.0,2.0.0)",'
                        + 'com.google.appengine.api;resolution:=optional,'
                        + 'com.google.apphosting.api;resolution:=optional,'
                        + '*',
                'Export-Package': "!${configureRelocateDependencies.prefix}.*,eu.xenit.care4alf.*"
        )
        dependsOn(relocateDependencies)
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/java-shared'
            kotlin.srcDirs += 'src/main/kotlin-shared'
            amp {
                dynamicExtension()
            }
        }
    }

    amp {
        deBundles = jar.outputs.files
    }

    jar.dependsOn(['cleanCompileTypeScript', 'compileTypeScript', 'lesscss'])

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
            amp(MavenPublication) {
                artifact tasks.amp
            }
        }
        repositories {
            maven {
                name 'snapshot'
                url 'https://artifactory.xenit.eu/artifactory/libs-snapshot-local'
                credentials {
                    username property("eu.xenit.artifactory.username")
                    password property("eu.xenit.artifactory.password")
                }
            }
            maven {
                name 'release'
                url 'https://artifactory.xenit.eu/artifactory/libs-release-local'
                credentials {
                    username property("eu.xenit.artifactory.username")
                    password property("eu.xenit.artifactory.password")
                }
            }
        }
    }


// make typescript use the node plugin (cfr https://github.com/sothmann/typescript-gradle-plugin)
// instead of 'tsc' command line which is not present on Jenkins server !j
    def nodeExecutable = {
        NodeExtension nodeExt = NodeExtension.get(project)
        return new VariantBuilder(nodeExt).build().nodeExec
    }
    node {
        download = true
    }

    test {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }

        if (project.hasProperty('username')) {
            systemProperty 'username', project.getProperty('username')
        }

        if (project.hasProperty('password')) {
            systemProperty 'password', project.getProperty('password')
        }

        if (project.hasProperty('alfresco.url')) {
            systemProperty 'alfresco.url', project.getProperty('alfresco.url')
        }

        if (project.hasProperty('protocol')) {
            systemProperty 'protocol', project.getProperty('protocol')
        }

        if (project.hasProperty('host')) {
            systemProperty 'host', project.getProperty('host')
        }

        if (project.hasProperty('port')) {
            systemProperty 'port', project.getProperty('port')
        }
    }


    compileTypeScript {
        sourcemap = false
        source = 'src/main/ts/eu/xenit/care4alf/web/js/care4alf.ts'
        outFile = file("${buildDir}/ts/eu/xenit/care4alf/web/js/care4alf.js")

        compilerExecutable "${nodeExecutable()} ${projectDir}/node_modules/typescript/lib/tsc.js"
        dependsOn "npmInstall"
    }
}


