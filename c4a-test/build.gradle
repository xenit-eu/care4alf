import com.github.dynamicextensionsalfresco.gradle.configuration.BaseConfig
import com.github.dynamicextensionsalfresco.gradle.tasks.InstallBundle

/*
These variables are overridden in 5x/overrides.gradle and 6x/overrides.gradle.
During normal use of the collected build scripts, you never actually build any
artifact that uses the values below and always those from an overrides.gradle.
The reason these are here at all is to provide information to IntelliJ so that
it can do good syntax highlighting, because Intellij won't apply the overrides
when it does highlighting for any Java files in the ./src/main/java directory.
 */
ext {
    c4a_dependency = ':c4a-impl'
    subproject_alfresco_version = '51'
    alfresco_repo_version = '5.1.g'
    alfresco_remote_api_version = '5.1.g'
    alfresco_war = 'alfresco-enterprise:5.1.5'
    alfresco_img_version = '5.1'
    alfresco_dm_version = '6.16'
    de_version = '2.0.1'
    http_version = '4.3.3'
    http_core_version = '4.3.3'
}

allprojects {
    apply plugin: 'alfresco-dynamic-extension' // Applies aQute bnd plugin for us
    apply plugin: 'eu.xenit.docker-alfresco'

    if (file("${project.projectDir}/overrides.gradle").exists()) {
        apply from: "${project.projectDir}/overrides.gradle"
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://artifactory.xenit.eu/artifactory/libs-release'
            credentials {
                username findProperty("eu.xenit.artifactory.username") ?: ""
                password findProperty("eu.xenit.artifactory.password") ?: ""
            }
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    sourceSets {
        main {
            java {
                srcDirs = ['../src/main/java', 'src/main/java']
                // This is needed because client side, these dependencies are not really provided
                runtimeClasspath += configurations.compileOnly
            }
            resources {
                // potentially unnecessary, we don't have this
                srcDir "${project.parent.projectDir}/src/main/resources"
            }
        }
    }

    configurations {
        integrationJar
        install.extendsFrom(integrationJar)
        compileOnly.extendsFrom(integrationJar)
    }

    dependencies {
        compileOnly project("${c4a_dependency}")

        compileOnly(group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_repo_version) {
            exclude group: 'maven-plugins'
        }
        compileOnly(group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_remote_api_version) {
            transitive = false
        }
        compileOnly group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        compileOnly group: 'eu.xenit.de', name: 'annotations', version: de_version
        compileOnly group: 'org.osgi', name: 'org.osgi.core', version: '4.3.1'

        integrationJar group: 'eu.xenit.testing', name: 'integration-testing', version: '1.1.0'

        compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: http_version
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: http_version
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: http_core_version
        compile group: 'org.apache.httpcomponents', name: 'httpmime', version: http_version
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.3.2'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.3.2'
        compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
        compile group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
        compile group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'
        compile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
        if (subproject_alfresco_version == '61') {
            compileOnly group: 'com.google.guava', name: 'guava', version: '24.0-jre'
        } else {
            compileOnly group: 'com.google.guava', name: 'guava', version: '11.0.2'
        }

        compile "javax.xml.bind:jaxb-api-osgi:2.2.7"
        compile "org.glassfish.hk2:osgi-resource-locator:1.0.1"

    }
    jar {
        bnd(
                'Export-Package': 'eu.xenit.care4alfintegration.*',
                'Include-Resource': includeResource(configurations.compile),
                'Bundle-ClassPath': bundleClassPath(configurations.compile),
                'Alfresco-Dynamic-Extension': 'true',
                'Import-Package': ('eu.xenit.care4alf.*,'
                        // We need to specify this very wide version range because otherwise the bnd tool will choose
                        // a very specific version (I don't know why) that prevents deployment
                        + 'org.json;resolution:=optional;version="[0,99999999)",'
                        + '!COM.newmonics.PercClassLoader,'
                        + '!android.os,'
                        + '!com.github.scribejava.*,'
                        + '!com.google.appengine.api,'
                        + '!com.google.apphosting.api,'
                        + '!com.google.gson,'
                        + '!com.thoughtworks.xstream,'
                        + '!org.codehaus.jackson.*,'
                        // These are the fault of groovy
                        + '!org.apache.commons.cli,'
                        + '!org.apache.ivy.*,'
                        + '!org.fusesource.jansi,'
                        // This is the fault of commons-logging
                        + '!org.apache.log,'
                        // This is the fault of mockito
                        + '!org.apache.tools.ant.*,' 
                        + '!org.junit.internal.runners.*,'
                        + '!org.mockito.asm.signature,'
                        + '!groovy.runtime.metaclass,'
                        + '!jrockit.vm,'
                        + '*')
        )
    }

    // Docker dependencies
    dependencies {
        baseAlfrescoWar "org.alfresco:${alfresco_war}@war"
        alfrescoAmp "eu.xenit:alfresco-dynamic-extensions-repo-${subproject_alfresco_version}:${de_version}@amp"
        alfrescoAmp project(path: "${c4a_dependency}", configuration: 'amp')
        if (subproject_alfresco_version == '61') {
            alfrescoAmp "eu.xenit.alfresco:alfresco-hotfix-MNT-20557:1.0.1@amp"
        }
    }

    dockerAlfresco {
        baseImage = "hub.xenit.eu/alfresco-enterprise/alfresco-enterprise:${alfresco_img_version}"
        leanImage = true
        dockerBuild {
            repository = "hub.xenit.eu/alfred-ops/care4alf-alfresco-${subproject_alfresco_version}"
        }
    }

    def composeUpTask = project.tasks.getByName("composeUp")
    def composeDownTask = project.tasks.getByName("composeDown")


    task configureDE {
        dependsOn composeUpTask
        doLast {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            def port = serviceInfo.ports[8080]
            def host = serviceInfo.getHost()
            alfrescoDynamicExtensions.repository.endpoint.port = port
            alfrescoDynamicExtensions.repository.endpoint.host = host
        }
    }

    task configureDELocal {
        doLast {
            alfrescoDynamicExtensions.repository.endpoint.protocol = project.hasProperty('protocol') ? project.protocol : 'http'
            alfrescoDynamicExtensions.repository.endpoint.port = project.hasProperty('port') ? project.port : '8080'
            alfrescoDynamicExtensions.repository.endpoint.host = project.hasProperty('host') ? project.host : 'localhost'
        }
    }

    task installIntegrationJar(type: InstallBundle) {
        dependsOn configureDE
        files = configurations.install { transitive = false }
    }

    task installIntegrationJarLocal(type: InstallBundle) {
        dependsOn configureDELocal
        files = configurations.install { transitive = false }
    }

    task installTestsOnDocker(type: InstallBundle) {
        dependsOn installIntegrationJar
        dependsOn jar
        files = jar.outputs
    }

    task installTestsLocal(type: InstallBundle) {
        dependsOn installIntegrationJarLocal
        dependsOn jar
        files = jar.outputs
    }

    task integrationTest(type: Test) {
        group 'verification'
        dependsOn installTestsOnDocker
        testClassesDirs = sourceSets.main.output.classesDirs
        classpath = sourceSets.main.runtimeClasspath

        doFirst {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            def port = serviceInfo.ports[8080]
            def host = serviceInfo.getHost()
            systemProperty("alfresco.url", "http://admin:admin@" + host + ":" + port + "/alfresco")
            systemProperty("alfresco.protocol", "http")
            systemProperty("alfresco.host", host)
            systemProperty("alfresco.port", port)
        }
        outputs.upToDateWhen { false }

        // After the tests, the docker setup should be stopped
        finalizedBy(composeDownTask)
    }

    task integrationTestLocal(type: Test) {
        group 'verification'
        dependsOn installTestsLocal
        testClassesDirs = sourceSets.main.output.classesDirs
        classpath = sourceSets.main.runtimeClasspath
        def host = project.hasProperty('host') ? project.host : 'localhost'
        def port = project.hasProperty('port') ? project.port : '8080'
        def protocol = project.hasProperty('protocol') ? project.protocol : 'http'
        systemProperty("alfresco.url", "$protocol://admin:admin@" + host + ":" + port + "/alfresco")
        systemProperty("alfresco.url", "http://admin:admin@" + host + ":" + port + "/alfresco")
        systemProperty("alfresco.protocol", "$protocol")
        systemProperty("alfresco.host", host)
        systemProperty("alfresco.port", "$port")

        outputs.upToDateWhen { false }
    }
}
