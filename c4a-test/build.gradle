plugins {
    id 'eu.xenit.alfresco-remote-testrunner' version '2.0.0-rc.6' apply false
}

/*
These variables are overridden in 5x/overrides.gradle and 6x/overrides.gradle.
During normal use of the collected build scripts, you never actually build any
artifact that uses the values below and always those from an overrides.gradle.
The reason these are here at all is to provide information to IntelliJ so that
it can do good syntax highlighting, because Intellij won't apply the overrides
when it does highlighting for any Java files in the ./src/main/java directory.
 */
ext {
    c4a_dependency = ':c4a-impl'
    subproject_alfresco_version = '51'
    alfresco_repo_version = '5.1.g'
    alfresco_remote_api_version = '5.1.g'
    alfresco_war = 'alfresco-enterprise:5.1.5'
    alfresco_img_version = '5.1'
    alfresco_dm_version = '6.16'
    http_fluent_version = '4.5.1'
    http_client_version = '4.5.1'
    http_core_version = '4.4.3'
    http_mime_version = '4.5.1'
}

allprojects {
    apply plugin: 'eu.xenit.de'
    apply plugin: 'eu.xenit.alfresco'
    apply plugin: 'eu.xenit.alfresco-remote-testrunner'
    apply plugin: 'eu.xenit.docker-compose'
    apply plugin: 'eu.xenit.docker-alfresco'

    if (file("${project.projectDir}/overrides.gradle").exists()) {
        apply from: "${project.projectDir}/overrides.gradle"
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://artifactory.xenit.eu/artifactory/libs-release'
            credentials {
                username findProperty("eu.xenit.artifactory.username") ?: ""
                password findProperty("eu.xenit.artifactory.password") ?: ""
            }
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    sourceSets {
        main {
            java {
                srcDirs = []
            }
            resources {
                srcDirs = []
            }
        }
        integrationTest {
            java {
                srcDirs = ["./src/main/java"]
            }
            resources {
                srcDirs = ["./src/main/resources"]
            }
        }
    }

    dependencies {
        alfrescoProvided project("${c4a_dependency}")

        alfrescoProvided(group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_repo_version) {
            exclude group: 'maven-plugins'
            exclude group: 'org.springframework.social'
        }
        alfrescoProvided(group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_remote_api_version) {
            transitive = false
        }
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        alfrescoProvided group: 'eu.xenit.de', name: 'annotations', version: deVersion
        alfrescoProvided group: 'org.osgi', name: 'org.osgi.core', version: '4.3.1'


        integrationTestImplementationLocal group: 'org.apache.httpcomponents', name: 'fluent-hc', version: http_fluent_version
        integrationTestImplementationLocal group: 'org.apache.httpcomponents', name: 'httpclient', version: http_client_version
        integrationTestImplementationLocal group: 'org.apache.httpcomponents', name: 'httpcore', version: http_core_version
        integrationTestImplementationLocal group: 'org.apache.httpcomponents', name: 'httpmime', version: http_mime_version
        alfrescoProvided group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.3.2'
        alfrescoProvided group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.3.2'
        integrationTestImplementationLocal group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
        integrationTestImplementationLocal group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
        integrationTestImplementationLocal group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'
        integrationTestImplementationLocal group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
        integrationTestImplementationLocal group: 'org.json', name: 'json', version: '20090211'
        if (subproject_alfresco_version == '62' || subproject_alfresco_version == '70') {
            alfrescoProvided group: 'com.google.guava', name: 'guava', version: '27.1-jre'
        } else {
            alfrescoProvided group: 'com.google.guava', name: 'guava', version: '11.0.2'
        }

        integrationTestImplementationLocal "javax.xml.bind:jaxb-api-osgi:2.2.7"
        integrationTestImplementationLocal "org.glassfish.hk2:osgi-resource-locator:1.0.1"

    }
    jar {
        bnd(
                'Export-Package': 'eu.xenit.care4alfintegration.*',
                'Include-Resource': includeResource(configurations.compile),
                'Bundle-ClassPath': bundleClassPath(configurations.compile),
                'Alfresco-Dynamic-Extension': 'true',
                'Import-Package': ('eu.xenit.care4alf.*,'
                        // We need to specify this very wide version range because otherwise the bnd tool will choose
                        // a very specific version (I don't know why) that prevents deployment
                        + 'org.json;resolution:=optional;version="[0,99999999)",'
                        + 'javax.activation;version="[0,99999999)",'
                        + '!COM.newmonics.PercClassLoader,'
                        + '!android.os,'
                        + '!com.github.scribejava.*,'
                        + '!com.google.appengine.api,'
                        + '!com.google.apphosting.api,'
                        + '!com.google.gson,'
                        + '!com.thoughtworks.xstream,'
                        + '!org.codehaus.jackson.*,'
                        // These are the fault of groovy
                        + '!org.apache.commons.cli,'
                        + '!org.apache.ivy.*,'
                        + '!org.fusesource.jansi,'
                        // This is the fault of commons-logging
                        + '!org.apache.log,'
                        // This is the fault of mockito
                        + '!org.apache.tools.ant.*,'
                        + '!org.junit.internal.runners.*,'
                        + '!org.mockito.asm.signature,'
                        + '!groovy.runtime.metaclass,'
                        + '!jrockit.vm,'
                        + '*')
        )
    }

    installBundle.enabled = false
}

subprojects {

    jar.enabled = false

    // Docker dependencies
    dependencies {
        // gradle plugin does a check on version between baseimage war and new war. since 7.0 the version of the product
        // no longer matches the version of the war. to avoid the problem, we apply the java-platform plugin, depend on the
        // alfresco platform, and delegate the war version from there.
        if (subproject_alfresco_version == '70') {
            baseAlfrescoWar platform("org.alfresco:acs-packaging:${alfresco_img_version}")
            baseAlfrescoWar 'org.alfresco:content-services@war'
        } else {
            baseAlfrescoWar "org.alfresco:${alfresco_war}@war"
        }
        alfrescoAmp "eu.xenit:alfresco-dynamic-extensions-repo-${subproject_alfresco_version}:${deVersion}@amp"
        alfrescoAmp project(path: "${c4a_dependency}", configuration: 'amp')
        if (subproject_alfresco_version == '62') {
            alfrescoAmp "eu.xenit.alfresco:alfresco-hotfix-MNT-20557:1.0.2@amp"
        }
    }

    dockerAlfresco {
        baseImage = "hub.xenit.eu/alfresco-enterprise/alfresco-repository-enterprise:${alfresco_img_version}"
        leanImage = true
        dockerBuild {
            repository = "hub.xenit.eu/alfred-ops/care4alf-alfresco-repo-${subproject_alfresco_version}"
        }
    }

    def composeUpTask = project.tasks.getByName("composeUp")
    def composeDownTask = project.tasks.getByName("composeDown")

    alfrescoIntegrationTest {
        integrationTestPackages = ["eu.xenit.care4alfintegration"]
    }

    installIntegrationTestingBundle {
        dependsOn composeUpTask
        doFirst {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            if (serviceInfo != null) {
                alfrescoDynamicExtensions {
                    repository {
                        endpoint {
                            host = serviceInfo.host
                            port = serviceInfo.ports[8080]
                        }
                    }
                }
            }
        }
    }

    integrationTest {
        doFirst {
            def host = composeUpTask.servicesInfos.get("alfresco-core").getHost()
            def port = composeUpTask.servicesInfos.get("alfresco-core").ports[8080]
            systemProperty("alfresco.url", "http://admin:admin@" + host + ":" + port + "/alfresco")
            systemProperty("alfresco.protocol", "http")
            systemProperty("alfresco.host", host)
            systemProperty("alfresco.port", port)
        }
    }
}
