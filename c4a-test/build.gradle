plugins {
    id 'eu.xenit.alfresco-remote-testrunner' version '2.0.0' apply false
}

/*
These variables are overridden in 6x/overrides.gradle and 7x/overrides.gradle.
During normal use of the collected build scripts, you never actually build any
artifact that uses the values below and always those from an overrides.gradle.
The reason these are here at all is to provide information to IntelliJ so that
it can do good syntax highlighting, because Intellij won't apply the overrides
when it does highlighting for any Java files in the ./src/main/java directory.
 */
ext {
    c4a_dependency = ':c4a-impl:care4alf-6x'
    subproject_alfresco_version = '62'
    alfresco_repo_version = '7.134.1'
    alfresco_remote_api_version = '7.107.1'
    alfresco_platform = 'org.alfresco:acs-packaging:6.2.2.19'
    alfresco_war = 'org.alfresco:content-services@war'
    alfresco_img_version = '6.2.2'
    alfresco_dm_version = '8.50.2'
    http_fluent_version = '4.5.9'
    http_client_version = '4.5.9'
    http_core_version = '4.4.11'
    http_mime_version = '4.5.8'
}

allprojects {
    apply plugin: 'eu.xenit.de'
    apply plugin: 'eu.xenit.alfresco'
    apply plugin: 'eu.xenit.alfresco-remote-testrunner'

    if (file("${project.projectDir}/overrides.gradle").exists()) {
        apply from: "${project.projectDir}/overrides.gradle"
    }

    repositories {
        mavenCentral()
        maven {
            url "https://repo.xenit.eu/K8TBkpYRAtTc9flA/private/maven/"
            credentials {
                username findProperty("eu.xenit.cloudsmith.username") ?: ""
                password findProperty("eu.xenit.cloudsmith.password") ?: ""
            }
        }
        maven {
            url 'https://artifacts.alfresco.com/nexus/content/groups/private'
            credentials {
                username findProperty('org.alfresco.maven.nexus.username') ?: ""
                password findProperty('org.alfresco.maven.nexus.password') ?: ""
            }
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        alfrescoProvided project("${c4a_dependency}")

        alfrescoProvided(group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_repo_version) {
            exclude group: 'maven-plugins'
            exclude group: 'org.springframework.social'
        }
        alfrescoProvided(group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_remote_api_version) {
            transitive = false
        }
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        alfrescoProvided group: 'eu.xenit.de', name: 'annotations', version: deVersion
        alfrescoProvided group: 'org.osgi', name: 'org.osgi.core', version: '4.3.1'


        integrationTestImplementationRemote group: 'org.apache.httpcomponents', name: 'fluent-hc', version: http_fluent_version
        integrationTestImplementationRemote group: 'org.apache.httpcomponents', name: 'httpclient', version: http_client_version
        integrationTestImplementationRemote group: 'org.apache.httpcomponents', name: 'httpcore', version: http_core_version
        integrationTestImplementationRemote group: 'org.apache.httpcomponents', name: 'httpmime', version: http_mime_version
        alfrescoProvided group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.3.2'
        alfrescoProvided group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.3.2'
        integrationTestImplementationRemote group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
        integrationTestImplementationRemote group: 'org.json', name: 'json', version: '20090211'
        alfrescoProvided group: 'com.google.guava', name: 'guava', version: '27.1-jre'


        integrationTestImplementationRemote "javax.xml.bind:jaxb-api-osgi:2.2.7"
        integrationTestImplementationRemote "org.glassfish.hk2:osgi-resource-locator:1.0.1"

        // Tests using restassured are not alfresco-remote integrationtests, in the regular way.
        integrationTestImplementationLocal group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
        integrationTestImplementationLocal group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
        integrationTestImplementationLocal group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'

    }

    installBundle.enabled = false
}
subprojects {

    apply plugin: 'eu.xenit.docker-compose'
    apply plugin: 'eu.xenit.docker-alfresco'

    // Docker dependencies
    dependencies {
        // gradle plugin does a check on version between baseimage war and new war.
        // Since 7.0 the version of the product no longer matches the version of the war.
        // To avoid the problem, we depend on the alfresco platform, and delegate the war version from there.
        baseAlfrescoWar platform("${alfresco_platform}")
        baseAlfrescoWar "${alfresco_war}"
        alfrescoAmp "eu.xenit:alfresco-dynamic-extensions-repo-${subproject_alfresco_version}:${deVersion}@amp"
        alfrescoAmp project(path: "${c4a_dependency}", configuration: 'amp')
        if (subproject_alfresco_version == '62') {
            alfrescoAmp "eu.xenit.alfresco:alfresco-hotfix-MNT-20557:1.0.2@amp"
        }
    }

    dockerBuild {
        alfresco {
//            baseImage = "docker.xenit.eu/private/alfresco-enterprise/alfresco-repository-enterprise:${alfresco_img_version}"
            baseImage = "hub.xenit.eu/alfresco-enterprise/alfresco-repository-enterprise:${alfresco_img_version}"
            leanImage = true
        }
    }

    buildDockerImage {
        outputs.upToDateWhen { false }
    }

    def composeUpTask = project.tasks.getByName("composeUp")
    composeUpTask.dependsOn buildDockerImage
    def composeDownTask = project.tasks.getByName("composeDown")

    alfrescoIntegrationTest {
        integrationTestPackages = ["eu.xenit.care4alfintegration"]
    }

    installIntegrationTestingBundle {
        dependsOn composeUpTask
        doFirst {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            def host = "localhost"
            def port = 8080
            if(serviceInfo != null) {
                host = serviceInfo.host
                port = serviceInfo.ports[8080]
            }
            alfrescoDynamicExtensions {
                repository {
                    endpoint.host = project.hasProperty("host") ? project.host : host
                    endpoint.port = project.hasProperty("port") ? project.port : port
                }
            }
        }
    }

    integrationTest {
        finalizedBy composeDownTask
        doFirst {
            def serviceInfo = composeUpTask.servicesInfos
            def host = "localhost"
            def port = 8080
            if (serviceInfo != null && serviceInfo.get("alfresco-core") != null) {
                host = serviceInfo.get("alfresco-core").getHost()
                port = serviceInfo.get("alfresco-core").ports[8080]
            }
            host = project.hasProperty("host") ? project.host : host
            port = project.hasProperty("port") ? project.port : port
            systemProperty("alfresco.url", "http://admin:admin@" + host + ":" + port + "/alfresco")
            systemProperty("alfresco.protocol", "http")
            systemProperty("alfresco.host", host)
            systemProperty("alfresco.port", port)
        }
    }
}

