apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        all {
            pom {
                url = 'https://bitbucket.org/xenit/care4alf/'
                name = 'care4alf'
                description = 'Care4Alf â€” The Alfresco Swiss Army Knife'

                developers {
                    developer {
                        id = "xenit"
                        name = "Xenit Solutions NV"
                    }
                }

                scm {
                    connection = 'scm:git:git@bitbucket.org:xenit/care4alf.git'
                    developerConnection = 'scm:git:git@bitbucket.org:xenit/care4alf.git'
                    url = 'https://bitbucket.org/xenit/care4alf/'
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        // Sonatype
        maven {
            name = 'Sonatype'
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = project.findProperty('publish_username') ?: ''
                password = project.findProperty('publish_password') ?: ''
            }
        }
    }
}

afterEvaluate {
    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(publish)) {
        if (!project.hasProperty('keyId') || !project.hasProperty('secretKeyRingFile') || !project.hasProperty('password')) {
            throw new GradleException('You need to provide signing params in order to sign artifacts')
        }

        ext."signing.keyId" = project.findProperty('keyId')
        ext."signing.secretKeyRingFile" = project.findProperty('secretKeyRingFile')
        ext."signing.password" =  project.findProperty('password')
    }
}
