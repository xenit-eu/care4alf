import com.github.dynamicextensionsalfresco.gradle.configuration.BaseConfig

apply plugin: 'ampde'
apply plugin: 'kotlin'
apply plugin: 'com.moowork.node'
apply plugin: 'de.richsource.gradle.plugins.typescript'
apply plugin: 'lesscss'
apply plugin: 'signing'
apply plugin: 'maven-publish'

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}



task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadoc"
}

def alfrescoAmp = file("${buildDir}/distributions/${project.name}-${project.version}.amp")
task setupArtifacts {
    artifacts {
        archives alfrescoAmp, sourceJar, javadocJar
    }
}

//uploadArchives {
//    dependsOn setupArtifacts
//    repositories {
//        mavenDeployer {
//            signing {
//                required {false}
//                sign configurations.archives
//            }
//            beforeDeployment {
//                MavenDeployment deployment -> signing.signPom(deployment)
//            }
//
//            repository(url: project.hasProperty('publish_url') ? project.publish_url : "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: project.hasProperty('publish_username') ? project.publish_username : '', password: project.hasProperty('publish_password') ? project.publish_password : '')
//            }
//
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: project.hasProperty('publish_username') ? project.publish_username : '', password: project.hasProperty('publish_password') ? project.publish_password : '')
//            }
//
//            pom.project {
//                url 'https://bitbucket.org/xenit/care4alf'
//                name "Care4Alf"
//                description "An Alfresco dynamic extension providing a variety of maintainance/admin/support utilities " +
//                        "for alfresco, along side with optional monitoring extension"
//
//                scm {
//                    connection 'scm:git:git@bitbucket.org:xenit/care4alf.git'
//                    developerConnection 'scm:git:git@bitbucket.org:xenit/care4alf.git'
//                    url 'https://bitbucket.org/xenit/care4alf'
//                }
//
//                licenses {
//                    license {
//                        name 'GNU Lesser General Public License v3.0 or later'
//                        url 'http://www.gnu.org/licenses/lgpl-3.0-standalone.html'
//                    }
//                }
//
//                developers {
//                    developer{
//                        id "laurentvdl"
//                        name "Laurent Van der Linden"
//                        roles{
//                            role "Founder"
//                            role "Architect"
//                        }
//                    }
//                    developer {
//                        id 'willemvde'
//                        name 'Willem Van den Eynde'
//                        email 'willem.vandeneynde@xenit.eu '
//                        roles{
//                            role "Architect"
//                            role "Developer"
//                        }
//                    }
//                    developer {
//                        id 'stanmine'
//                        name 'Stan Mine'
//                        email 'stan.mine@xenit.eu'
//                        roles{
//                            role "Developer"
//                        }
//                    }
//                    developer {
//                        id 'Pantera160'
//                        name 'Thomas Straetmans'
//                        email 'thomas.straetmans@xenit.eu'
//                        roles{
//                            role "Developer"
//                        }
//                    }
//                    developer {
//                        id 'yregaieg'
//                        name 'Younes Regaieg'
//                        email 'younes.regaieg@xenit.eu'
//                        roles{
//                            role "Developer"
//                        }
//                    }
//                    developer {
//                        id 'thijslemmens'
//                        name 'Thijs Lemmens'
//                        email 'thijs.lemmens@xenit.eu'
//                        roles{
//                            role "Developer"
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(uploadArchives)) {
        if (!project.hasProperty('keyId') || !project.hasProperty('secretKeyRingFile') || !project.hasProperty('password')){
            throw new GradleException('You need to provide signing params in order to sign artifacts')
        }

        def id = project.hasProperty('keyId') ? project.keyId : ''
        def file = project.hasProperty('secretKeyRingFile') ? project.secretKeyRingFile : ''
        def password = project.hasProperty('password') ? project.password : ''

        ext."signing.keyId" = id
        ext."signing.secretKeyRingFile" = file
        ext."signing.password" = password
    }else if (project.hasProperty("buildNumber")) {
        version = project.version.replace("SNAPSHOT", buildNumber)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId 'eu.xenit'
            version project.version.replace("SNAPSHOT", buildNumber)
        }
        amp(MavenPublication) {
            artifactId project.name + '-amp'
            groupId 'eu.xenit'
            version project.version.replace("SNAPSHOT", buildNumber)
            artifact file("${buildDir}/distributions/${project.name}-${project.version.replace("SNAPSHOT", buildNumber)}.amp")
            //artifact ampde
        }
//        integrationJar(MavenPublication) {
//            artifactId project.name + '-integration'
//            groupId 'eu.xenit'
//            version project.version.replace("SNAPSHOT", buildNumber)
//            artifact file("${buildDir}/libs-test/${project.name}-integration-${project.version.replace("SNAPSHOT", buildNumber)}.jar")
//        }
    }
    repositories {
        maven {
            name 'snapshot'
            url 'https://artifactory.xenit.eu/artifactory/libs-snapshot-local'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }
        maven {
            name 'release'
            url 'https://artifactory.xenit.eu/artifactory/libs-release-local'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }

    }
}


[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

repositories {
    mavenCentral()
    maven {
        url 'https://artifactory.xenit.eu/artifactory/libs-release'
        credentials {
            username property('eu.xenit.artifactory.username')
            password property('eu.xenit.artifactory.password')
        }
    }
}

dependencies {
    compileOnly("org.alfresco:alfresco-enterprise-repository:${alfresco_version}") {
        exclude group: 'org.activiti'
        exclude group: 'maven-plugins'
    }
    compileOnly("org.alfresco:alfresco-data-model:${alfresco_version}") {
        exclude group: 'maven-plugins'
    }

    compileOnly("eu.xenit.de:annotations:${deVersion}") { transitive = false }
    compileOnly("eu.xenit.de:annotations-runtime:${deVersion}") { transitive = false }
    compileOnly("eu.xenit.de:webscripts:${deVersion}") { transitive = false }

    compileOnly("org.osgi:org.osgi.core:4.3.1")

    compile('javax.transaction:transaction-api:1.1') { transitive = false }
    compile('com.googlecode.json-simple:json-simple:1.1')
    compile('javax.servlet:servlet-api:2.5')
    compile('com.google.collections:google-collections:1.0')
    compile('org.apache.commons:commons-csv:20110211')

    compile('com.fasterxml.jackson.core:jackson-databind:2.3.2')
    compile('org.apache.commons:commons-lang3:3.7')
    compile('com.google.guava:guava:19.0') // I believe Alfresco comes bundled with v11. Conflicts?

    compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")

    compile('commons-codec:commons-codec:1.10')
}

bundle {
    instruction 'Export-Package', 'eu.xenit.care4alf.*'
    instruction 'Alfresco-Dynamic-Extension', 'true'
    instruction 'Include-Resource', includeResource(configurations.compile)
    instruction 'Bundle-ClassPath',  bundleClassPath(configurations.compile)
}

lesscss {
    source = fileTree('src/main/less') {
        include '**/*.less'
    }
    dest = file("${buildDir}/resources/main/")
    compress = false
}

jar {
    version = project.version.replace("SNAPSHOT", buildNumber)
    from(compileTypeScript.outputs)
}

configurations {
    ampArtifact
}

artifacts {
    ampArtifact ampde
}

project.extensions.add("alfrescoDynamicExtensions", new BaseConfig())

jar.dependsOn(['cleanCompileTypeScript', 'compileTypeScript', 'lesscss'])

// make typescript use the node plugin (cfr https://github.com/sothmann/typescript-gradle-plugin)
// instead of 'tsc' command line which is not present on Jenkins server !j
import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

node {
    download = true
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    if (project.hasProperty('username')) {
        systemProperty 'username', project.getProperty('username')
    }

    if (project.hasProperty('password')) {
        systemProperty 'password', project.getProperty('password')
    }

    if (project.hasProperty('alfresco.url')) {
        systemProperty 'alfresco.url', project.getProperty('alfresco.url')
    }

    if (project.hasProperty('protocol')) {
        systemProperty 'protocol', project.getProperty('protocol')
    }

    if (project.hasProperty('host')) {
        systemProperty 'host', project.getProperty('host')
    }

    if (project.hasProperty('port')) {
        systemProperty 'port', project.getProperty('port')
    }
}


compileTypeScript {
    sourcemap = false
    source = 'src/main/ts/eu/xenit/care4alf/web/js/care4alf.ts'
    outFile = file("${buildDir}/ts/eu/xenit/care4alf/web/js/care4alf.js")

    compilerExecutable "${nodeExecutable()} ${projectDir}/node_modules/typescript/lib/tsc.js"
    dependsOn "npmInstall"
}
