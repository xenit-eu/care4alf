plugins {
    id 'eu.xenit.alfresco'
    id 'eu.xenit.amp'
}
import eu.xenit.gradle.alfrescosdk.tasks.Amp

apply plugin: 'alfresco-dynamic-extension'
apply plugin: 'kotlin'
apply plugin: 'com.moowork.node'
apply plugin: 'de.richsource.gradle.plugins.typescript'
apply plugin: 'lesscss'

description = "Care4Alf â€” The Alfresco Swiss Army Knife"

// For dependencies, still supporting 5.0
ext.alfresco_version = '5.0.4'

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadoc"
}

def alfrescoAmp = file("${buildDir}/distributions/${project.name}-${project.version}.amp")
task setupArtifacts {
    artifacts {
        archives alfrescoAmp, sourceJar, javadocJar
    }
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

repositories {
    mavenCentral()
    maven {
        url 'https://artifactory.xenit.eu/artifactory/libs-release'
        credentials {
            username property('eu.xenit.artifactory.username')
            password property('eu.xenit.artifactory.password')
        }
    }
}

dependencies {
    compileOnly("org.alfresco:alfresco-enterprise-repository:${alfresco_version}") {
        exclude group: 'org.activiti'
        exclude group: 'maven-plugins'
    }
    compileOnly("org.alfresco:alfresco-data-model:${alfresco_version}") {
        exclude group: 'maven-plugins'
    }

    compileOnly("eu.xenit.de:annotations:${deVersion}") { transitive = false }
    compileOnly("eu.xenit.de:annotations-runtime:${deVersion}") { transitive = false }
    compileOnly("eu.xenit.de:webscripts:${deVersion}") { transitive = false }

    compileOnly("org.osgi:org.osgi.core:4.3.1")

    compile('javax.transaction:transaction-api:1.1') { transitive = false }
    compile('com.googlecode.json-simple:json-simple:1.1')
    compile('javax.servlet:servlet-api:2.5')
    compile('com.google.collections:google-collections:1.0')
    compile('org.apache.commons:commons-csv:20110211')

    compile('com.fasterxml.jackson.core:jackson-databind:2.3.2')
    compile('org.apache.commons:commons-lang3:3.7')
    compile('com.google.guava:guava:19.0') // I believe Alfresco comes bundled with v11. Conflicts?

    compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")

    compile('commons-codec:commons-codec:1.10')
}

lesscss {
    source = fileTree('src/main/less') {
        include '**/*.less'
    }
    dest = file("${buildDir}/resources/main/")
    compress = false
}

jar {
    version = project.version.replace("SNAPSHOT", buildNumber)
    from(compileTypeScript.outputs)

    bnd (
        'Alfresco-Dynamic-Extension': 'true',
        'Bundle-Description': 'Care4Alf: The Alfresco Swiss Army Knife',
        'Bundle-Name': 'care4alf',
        'Bundle-SymbolicName': 'eu.xenit.care4alf',
        'Alfresco-Spring-Configuration': 'eu.xenit.care4alf',
        'DynamicImport-Package': '*',
        'Include-Resource': includeUnrolledResource(configurations.compile),
        'Import-Package': 'org.json;version="[0,99999999)",' 
                + 'kotlin.internal.jdk7;resolution:=optional,'
                + 'com.hazelcast.monitor;resolution:=optional,'
                + 'org.apache.commons.logging;version="[1.0.0,2.0.0)",'
                + 'kotlin.internal.jdk8;resolution:=optional,'
                + 'com.google.appengine.api;resolution:=optional,'
                + 'com.google.apphosting.api;resolution:=optional,'
                + 'kotlin.reflect.jvm.internal;resolution:=optional,'
                + '*',
        'Export-Package': 'eu.xenit.care4alf.*'
    )
}

sourceSets {
    main {
        amp {
            dynamicExtension()
        }
    }
}

amp {
    deBundles = jar.outputs.files
}

jar.dependsOn(['cleanCompileTypeScript', 'compileTypeScript', 'lesscss'])

// make typescript use the node plugin (cfr https://github.com/sothmann/typescript-gradle-plugin)
// instead of 'tsc' command line which is not present on Jenkins server !j
import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

node {
    download = true
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    if (project.hasProperty('username')) {
        systemProperty 'username', project.getProperty('username')
    }

    if (project.hasProperty('password')) {
        systemProperty 'password', project.getProperty('password')
    }

    if (project.hasProperty('alfresco.url')) {
        systemProperty 'alfresco.url', project.getProperty('alfresco.url')
    }

    if (project.hasProperty('protocol')) {
        systemProperty 'protocol', project.getProperty('protocol')
    }

    if (project.hasProperty('host')) {
        systemProperty 'host', project.getProperty('host')
    }

    if (project.hasProperty('port')) {
        systemProperty 'port', project.getProperty('port')
    }
}


compileTypeScript {
    sourcemap = false
    source = 'src/main/ts/eu/xenit/care4alf/web/js/care4alf.ts'
    outFile = file("${buildDir}/ts/eu/xenit/care4alf/web/js/care4alf.js")

    compilerExecutable "${nodeExecutable()} ${projectDir}/node_modules/typescript/lib/tsc.js"
    dependsOn "npmInstall"
}
