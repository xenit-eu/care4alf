ext.alfrescoVersion = '4.2.3.1'
ext.springVersion = '3.0.5.RELEASE'

version='1.1.0'

buildscript {
    ext.kotlin_version = '1.0.3'
    repositories {
        jcenter()
        mavenCentral()
        maven {
            //url 'https://github.com/sothmann/typescript-gradle-plugin/raw/mavenrepo/'
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://artifactory.xenit.eu/artifactory/plugins-release-local'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }
    }
    dependencies {
        classpath(group: 'com.github.dynamicextensionsalfresco', name: 'gradle-plugin', version: '1.3.+')
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'de.richsource.gradle.plugins:typescript-gradle-plugin:1.8.0'
        classpath 'de.obqo.gradle:gradle-lesscss-plugin:1.0-1.3.3'
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
        classpath 'eu.xenit.gradle.plugins:ampde_gradle_plugin:1.0.0'
    }
}

apply plugin: 'kotlin'
apply plugin: 'ampde'
apply plugin: 'idea'
apply plugin: 'alfresco-dynamic-extension'
apply plugin: 'com.moowork.node'
apply plugin: 'de.richsource.gradle.plugins.typescript'
apply plugin: 'lesscss'
apply plugin: 'maven-publish'


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId 'eu.xenit'
            version project.version + '-' + buildNumber
        }
        amp(MavenPublication) {
            artifactId project.name + '-amp'
            groupId 'eu.xenit'
            version project.version + '-' + buildNumber
            artifact file("build/distributions/${project.name}-${project.version}.amp")
            //artifact ampde
        }
        integrationJar(MavenPublication) {
            artifactId project.name + '-integration'
            groupId 'eu.xenit'
            version project.version + '-' + buildNumber
            artifact file("build/libs/${project.name}-integration-${project.version}.jar")
        }
    }
    repositories {
        maven {
            name 'snapshot'
            url 'https://artifactory.xenit.eu/artifactory/libs-snapshot-local'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }
        maven {
            name 'release'
            url 'https://artifactory.xenit.eu/artifactory/libs-release-local'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }

    }
}


[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

repositories {
    maven {
        url 'https://artifactory.xenit.eu/artifactory/libs-release'
        credentials {
            username 'xenit'
            password 'LlC0GpyFWNIYU'
        }
    }
}

configurations {
    embedded
    amp
    ampdeLib {
        transitive = false
    }
    compile {
        extendsFrom embedded
        extendsFrom installDep
        extendsFrom ampdeLib
        extendsFrom installDep
    }
    installDep {
        transitive = false
    }
}

dependencies {
    compile("org.alfresco:alfresco-core:${alfrescoVersion}") { transitive = false }
    compile("org.alfresco:alfresco-repository:${alfrescoVersion}") { transitive = false }
    compile("org.alfresco:alfresco-enterprise-repository:${alfrescoVersion}") { transitive = false }
    compile("org.alfresco:alfresco-data-model:${alfrescoVersion}") { transitive = true }

    compile "org.springframework:spring-context:${project.springVersion}"
    compile "org.springframework:spring-jdbc:${project.springVersion}"
    compile "org.osgi:org.osgi.core:4.3.1"
    compile 'org.json:json:20090211'
    //compile("acegisecurity:acegi-security:0.8.2") {transitive = false}
    compile "org.slf4j:slf4j-api:1.7.5"
    compile 'org.eclipse.gemini:org.eclipse.gemini.blueprint.core:1.0.2.RELEASE'
    compile('javax.transaction:transaction-api:1.1') { transitive = false }
    compile('org.jibx:jibx-run:1.2.3') { transitive = false }
    compile('com.googlecode.json-simple:json-simple:1.1')
    compile('javax.servlet:servlet-api:2.5')
    compile('com.google.collections:google-collections:1.0')
    compile('org.codehaus.jackson:jackson-core-asl:1.1.0')
    compile('org.codehaus.jackson:jackson-mapper-asl:1.1.0')

    ampdeLib('eu.xenit.apix:integration-testing:1.2.27')
    installDep('eu.xenit.apix:integration-testing:1.2.27')

    embedded group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    embedded(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.3.2')

    embedded "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    embedded group: 'commons-codec', name: 'commons-codec', version: '1.10'
}

lesscss {
    source = fileTree('src/main/less') {
        include '**/*.less'
    }
    dest = file("${buildDir}/resources/main/")
    compress = false
}

sourceSets {
    main { java { srcDirs = ['src/main/java','src/test/java'] } }
}

jar {
    from(configurations.embedded) {
        into('lib')
    }
    from(compileTypeScript.outputs)
    manifest {
        instruction 'Bundle-Classpath', ".,${configurations.embedded.files.collect({ 'lib/' + it.name }).join(',')}"
        instruction 'Import-Package', 'org.alfresco.enterprise.*;resolution:=optional,javax.annotation;version="[1,4)",junit.framework;resolution:=optional,org.junit;resolution:=optional,org.junit.*;resolution:=optional,eu.xenit.apix.integrationtesting.*;resolution:=optional,eu.xenit.apix.integrationtesting;resolution:=optional,!org.hamcrest.*,!org.objenesis.*,!org.mockito.*,!jet.*,!kotlin.*,!org.alfresco.repo.lock.mem,org.apache.commons.logging;version="1.0",!org.apache.commons.codec.*,!com.fasterxml.jackson.databind.*,*'
    }
}

alfrescoDynamicExtensions {
    repository {
        endpoint {
            protocol = project.hasProperty('protocol') ? project.protocol : 'https'
            host = project.hasProperty('host') ? project.host : 'jenkins-c4a.dev.xenit.eu'
            port = project.hasProperty('port') ? project.port : '443'
            serviceUrl = '/alfresco/service'
        }
        authentication {
            username = project.hasProperty('username') ? project.username : 'admin'
            password = project.hasProperty('password') ? project.password : 'admin'
        }
    }
}

jar.dependsOn(['cleanCompileTypeScript', 'compileTypeScript', 'lesscss'])

// generates an "integration" jar containing only interfaces
// that other modules which want to publish information to care4alf
// can implement.
task integrationJar(type: Jar) {
    baseName = 'care4alf-integration'
    dependsOn compileJava
    from('build/classes/main') {
        include 'eu/xenit/care4alf/integration/**/*'
    }
    manifest {
        attributes("Bundle-Name": baseName)
    }
}


// make typescript use the node plugin (cfr https://github.com/sothmann/typescript-gradle-plugin)
// instead of 'tsc' command line which is not present on Jenkins server !j
import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

node {
    download = true
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

compileTypeScript {
    sourcemap = false
    source = 'src/main/ts/eu/xenit/care4alf/web/js/care4alf.ts'
    outFile = file("${buildDir}/ts/eu/xenit/care4alf/web/js/care4alf.js")

    compilerExecutable "${nodeExecutable()} ${projectDir}/node_modules/typescript/lib/tsc.js"
    dependsOn "npmInstall"
}

import com.github.dynamicextensionsalfresco.gradle.tasks.*

project.tasks.create('installDependencies', InstallBundle).configure {
    configuration = project.configurations.installDep
}
