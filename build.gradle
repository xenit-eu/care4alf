ext.alfrescoVersion = '4.0.2.54'
ext.springVersion = '3.0.5.RELEASE'

buildscript {
    ext.kotlin_version = '1.0.3'
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://github.com/sothmann/typescript-gradle-plugin/raw/mavenrepo/'
        }
    }
    dependencies {
        classpath(group: 'com.github.dynamicextensionsalfresco', name: 'gradle-plugin', version: '1.4.+')
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'de.richsource.gradle.plugins:typescript-gradle-plugin:1.0.5'
        classpath 'de.obqo.gradle:gradle-lesscss-plugin:1.0-1.3.3'
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'alfresco-dynamic-extension'
apply plugin: 'typescript'
apply plugin: 'lesscss'
apply plugin: 'maven-publish'


def care4alf_buildNumber = project.hasProperty('buildNumber') ? buildNumber : 0

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            version project.version + '-' + care4alf_buildNumber
        }
        amp(MavenPublication) {
            artifactId project.name + '-amp'
            groupId 'eu.xenit'
            version '1.0.0' + '-' + care4alf_buildNumber
            artifact file("build/amps/" + project.name +".amp")
            //artifact ampde
        }
    }
    repositories {
        maven {
            name 'snapshot'
            url 'https://artifactory.xenit.eu/artifactory/libs-snapshot-local'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }
        maven {
            name 'release'
            url 'https://artifactory.xenit.eu/artifactory/libs-release-local'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }

    }
}


[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

repositories {
    maven {
        url 'https://artifactory.xenit.eu/artifactory/libs-release'
        credentials {
            username 'xenit'
            password 'LlC0GpyFWNIYU'
        }
    }
}

configurations {
    embedded
    compile.extendsFrom(embedded)
    amp
}

dependencies {
    compile("org.alfresco:alfresco-core:${project.alfrescoVersion}") { transitive = false }
    compile("org.alfresco:alfresco-repository:${project.alfrescoVersion}")
    compile("org.alfresco:alfresco-data-model:${project.alfrescoVersion}") { transitive = true }

    compile "org.springframework:spring-context:${project.springVersion}"
    compile "org.springframework:spring-jdbc:${project.springVersion}"
    compile "org.osgi:org.osgi.core:4.3.1"
    compile 'org.json:json:20090211'
    compile("acegisecurity:acegi-security:0.8.2") {transitive = false}
    compile "org.slf4j:slf4j-api:1.7.5"


    compile(group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1')
    compile(group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6')
    compile(group: 'log4j', name: 'log4j', version: '1.2.17')
    compile(group: 'commons-lang', name: 'commons-lang', version: '2.6')
    testCompile(group: 'junit', name: 'junit', version: '4.12')




    compile 'org.eclipse.gemini:org.eclipse.gemini.blueprint.core:1.0.2.RELEASE'
    compile('javax.transaction:transaction-api:1.1') { transitive = false }
    compile('org.jibx:jibx-run:1.2.3') { transitive = false }
    compile('com.googlecode.json-simple:json-simple:1.1')
    compile('javax.servlet:servlet-api:2.5')
    compile('com.google.collections:google-collections:1.0')
    compile('org.codehaus.jackson:jackson-core-asl:1.1.0')
    embedded('org.codehaus.jackson:jackson-mapper-asl:1.1.0')

    compile('eu.xenit.apix:integration-testing:1.2.24') { transitive = false }


    embedded "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    embedded group: 'commons-codec', name: 'commons-codec', version: '1.10'
    //embedded "org.jetbrains.kotlin:kotlin-jdbc:$kotlin_version"

    amp(project(':'))
//    compile('eu.xenit.apix:integration-testing:1.1.4'){
//        exclude group: 'com.github.dynamicextensionsalfresco'
//        exclude group: 'commons-codec'
//    }
    testCompile 'org.mockito:mockito-all:1.9.5'
}

compileTypeScript {
    sourcemap = false
    source = 'src/main/ts/eu/xenit/care4alf/web/js/care4alf.ts'
    out = file("${buildDir}/ts/eu/xenit/care4alf/web/js/care4alf.js")
}

lesscss {
    source = fileTree('src/main/less') {
        include '**/*.less'
    }
    dest = file("${buildDir}/resources/main/")
    compress = false
}

sourceSets {
    main { java { srcDirs = ['src/main/java'] } }
}

//sourceSets {
//    main { java { srcDirs = ['src/main/java','src/test/java'] } }
//    test { java { srcDirs = ["src/test/java"] } }
//}

jar {
    from(configurations.embedded) {
        into('lib')
    }
    from(compileTypeScript.outputs)
    manifest {
        instruction 'Bundle-Classpath', ".,${configurations.embedded.files.collect({ 'lib/' + it.name }).join(',')}"
        instruction 'Import-Package', '!jet.*,!org.codehaus.jackson.map.*,!kotlin.*,!org.alfresco.repo.lock.mem,org.apache.commons.logging;version="1.0",!org.apache.commons.codec.*,!org.alfresco.service.cmr.i18n,*'
        instruction '-noee', 'true'
    }
}

task amp(type: Zip) {
    from(configurations.amp) {
        into('config/dynamic-extensions/bundles/')
    }

    from(file('module.properties'))

    baseName = 'care4alf'
    extension 'amp'
    destinationDir = file("$buildDir/amps")
}

alfrescoDynamicExtensions {
    repository {
        endpoint {
            protocol = project.hasProperty('protocol') ? project.protocol : 'http'
            host = project.hasProperty('host') ? project.host : 'localhost'
            port = project.hasProperty('port') ? project.port : '8080'
            serviceUrl = '/alfresco/service'
        }
        authentication {
            username = project.hasProperty('username') ? project.username : 'admin'
            password = project.hasProperty('password') ? project.password : 'admin'
        }
    }
}

jar.dependsOn(['cleanCompileTypeScript', 'compileTypeScript', 'lesscss'])


